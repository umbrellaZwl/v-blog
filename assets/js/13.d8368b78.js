(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{363:function(t,a,s){"use strict";s.r(a);var e=s(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"前端路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端路由"}},[t._v("#")]),t._v(" 前端路由")]),t._v(" "),s("h2",{attrs:{id:"前端路由和后端路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端路由和后端路由"}},[t._v("#")]),t._v(" 前端路由和后端路由")]),t._v(" "),s("h3",{attrs:{id:"后端路由"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后端路由"}},[t._v("#")]),t._v(" 后端路由")]),t._v(" "),s("p",[t._v("后端路由即服务端路由，请求到达服务端，服务端根据不同的url做不同的处理，最后返回响应")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v(" 利于seo，服务端渲染（在服务端拼接html和数据）\n"),s("strong",[t._v("缺点")]),t._v(" 加大服务器压力，需要重新加载页面对用户体验不好，前后端耦合大")]),t._v(" "),s("h3",{attrs:{id:"前端路由-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端路由-2"}},[t._v("#")]),t._v(" 前端路由")]),t._v(" "),s("p",[t._v("前端路由指的是根据不同的浏览器记录，展示不同的页面DOM内容，（基于hash和history）页面不刷新")]),t._v(" "),s("p",[s("strong",[t._v("优点")]),t._v(" 用户体验好，切换速度快\n"),s("strong",[t._v("缺点")]),t._v(" 没有合理利用浏览器缓存， 不利于seo")]),t._v(" "),s("h2",{attrs:{id:"hash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" hash")]),t._v(" "),s("p",[t._v("hash指的是url # 后面的部分，基于location.hash可以获取到hash字符串。当hash改变时，会触发hashchange事件，通过监听该事件来展示不同的内容")]),t._v(" "),s("h2",{attrs:{id:"history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[t._v("#")]),t._v(" history")]),t._v(" "),s("p",[t._v("history对象提供了对浏览器的会话历史的访问\n"),s("code",[t._v("window.history.back()")]),t._v(" 向后跳转，如同点击浏览器回退\n"),s("code",[t._v("window.history.forward()")]),t._v(" 向前跳转，如同点击浏览器前进\n"),s("code",[t._v("window.history.go(n)")]),t._v("n为负值表示向后移动，n为正值表示向前移动。n=0表示刷新页面，n超过范围，则不动")]),t._v(" "),s("h2",{attrs:{id:"history-pushstate和history-replacestate"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history-pushstate和history-replacestate"}},[t._v("#")]),t._v(" history.pushState和history.replaceState")]),t._v(" "),s("p",[t._v("history.pushState(state, title, url)用于添加历史记录项。该方法接受三个参数\nhistory.replaceState 用于修改当前历史记录项")]),t._v(" "),s("ul",[s("li",[t._v("state：状态对象，当用户导航到该条目时，popstate事件触发到，事件的state属性为该状态对象的副本")]),t._v(" "),s("li",[t._v("标题：firefox目前忽略这个参数。为state传递一个标题")]),t._v(" "),s("li",[t._v("URL：新url必须和当前url同源，缺省值为当前url。")])]),t._v(" "),s("h3",{attrs:{id:"pushstate-和window-location-foo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pushstate-和window-location-foo"}},[t._v("#")]),t._v(" "),s("code",[t._v("pushState()")]),t._v("和"),s("code",[t._v("window.location = '#foo'")]),t._v(",")]),t._v(" "),s("p",[t._v("都会在当前页面创建并激活新的历史记录。但是pushState有如下优点：")]),t._v(" "),s("ul",[s("li",[t._v("pushState可以是与当前URL同源的任意URL")]),t._v(" "),s("li",[t._v("pushState设置当前相同url来创建新的历史记录，而window.location = '#foo'.必须要hash至不同时，才能创建新的历史记录项")]),t._v(" "),s("li",[t._v("可以将任务数据作为state对象和历史记录项关联")]),t._v(" "),s("li",[t._v("可以传递title参数，使用标题")])]),t._v(" "),s("h2",{attrs:{id:"popstate事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#popstate事件"}},[t._v("#")]),t._v(" popstate事件")]),t._v(" "),s("p",[t._v("活动的历史记录项发生变化时，popstate事件会被触发\n"),s("strong",[t._v("注意：调用pushState和popState不会触发popstate")])]),t._v(" "),s("h2",{attrs:{id:"获取当前页面状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取当前页面状态"}},[t._v("#")]),t._v(" 获取当前页面状态")]),t._v(" "),s("p",[t._v("页面加载时，或许会有个非null的状态对象。这是有可能发生的，举个例子，假如页面（通过pushState() 或 replaceState() 方法）设置了状态对象而后用户重启了浏览器。那么当页面重新加载时，页面会接收一个onload事件，但没有 popstate 事件。然而，假如你读取了history.state属性，你将会得到如同popstate 被触发时能得到的状态对象。")]),t._v(" "),s("p",[t._v("你可以读取当前历史记录项的状态对象state，而不必等待popstate 事件， 只需要这样使用history.state 属性：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尝试通过 pushState 创建历史条目,然后再刷新页面查看state状态对象变化;")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" history"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'currentState'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("currentState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  \n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);